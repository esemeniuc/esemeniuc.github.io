[
    {
        "ref": "https://semeniuc.ml/blog/sending-large-files-reliably-using-rsync-without-ssh/",
        "title": "Sending Large Files Reliably Using `rsync` Without SSH",
        "section": "blog",
        "tags": null,
        "date" : "2021.05.27",
        "body": "Rsync is super powerful! It allows you to:\n Send large files quickly over the same network Fix corrupt files without re-sending everything again No need for passwords or ssh access  Prerequisites  Both sides have rsync installed You can ping the sending machine  Setup Sender # make a config file to set up rsync cat \u0026gt; rsyncd.conf \u0026lt;\u0026lt;EOF [homedir] path = /home/%RSYNC_USER_NAME% comment = \u0026#34;my home folder\u0026#34; read only = true list = yes EOF # start rsync server rsync --daemon --config rsyncd.conf --port 8000 Check that directory is shared with:\nrsync rsync://localhost:1837 Output:\nme@a:~$ rsync rsync://localhost:1837 homedir \u0026quot;my home folder\u0026quot; Receiver rsync --progress --compress --inplace --checksum rsync://MY_HOST:1837/homedir/file.foo . Flags: --progress: show to progress of the copy\n--compress: use file compression to speed up copying on slow links\n--inplace: replace large files in-place (avoids running out of disk space if you have very large files)\n--checksum: copies over the blocks that are corrupt/changed, allowing large bandwidth savings at the cost of CPU and I/O for calculating checksums\nConclusion That\u0026rsquo;s it, you can send big files really fast :D\n"
    }
,
    {
        "ref": "https://semeniuc.ml/blog/how-to-connect-to-your-damn-kubernetes-pod/",
        "title": "How to Connect to Your Damn Kubernetes Pod",
        "section": "blog",
        "tags": null,
        "date" : "2021.04.19",
        "body": "How To Connect To Your Damn Kubernetes Pod So you have nginx in pod running on port 80, and you just want to curl the damn thing. How do you do it??\nLet\u0026rsquo;s start with a yaml file\napiVersion: apps/v1  kind: Deployment  metadata: name: my-nginx  spec: selector: matchLabels: run: my-nginx  replicas: 2 template: metadata: labels: run: my-nginx  spec: containers: - name: my-nginx  image: nginx  ports: - containerPort: 80 --- apiVersion: v1  kind: Service  metadata: name: my-nginx  labels: run: my-nginx  spec: ports: - port: 80 protocol: TCP  selector: run: my-nginx nginx.yaml source: https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/\nApply with: kubectl apply -f nginx.yaml --overwrite\nIf you have any old stuff and want to reset get back to stock: kubectl delete all --all --force\nOption 1 - Kubernetes Port Forwarding (Easiest) This forwards port 80 in your container to port 8888 on the host.\nkubectl port-forward deploy/my-nginx 8888:80 or kubectl port-forward service/my-nginx 8888:80\ncurl localhost:8888\nRef: https://kubectl.docs.kubernetes.io/references/kubectl/port-forward/\nOption 2 - Kubernetes Proxy Run kubectl proxy in the background and use Pod or Service method below.\nNote: this works for HTTP(S) services only, and beware the trailing slash!\nVia a Service ➜ ~ kubectl get services NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE kubernetes ClusterIP 10.96.0.1 \u0026lt;none\u0026gt; 443/TCP 3h9m my-nginx ClusterIP 10.109.50.51 \u0026lt;none\u0026gt; 80/TCP 3h9m curl http://localhost:8001/api/v1/namespaces/default/services/my-nginx/proxy/\nRef: https://kubectl.docs.kubernetes.io/references/kubectl/proxy/#connecting-to-an-internal-service\nVia a Pod ➜ ~ kubectl get pods NAME READY STATUS RESTARTS AGE my-nginx-5b56ccd65f-dtgcg 1/1 Running 0 3h10m my-nginx-5b56ccd65f-rr5nc 1/1 Running 0 3h10m curl http://localhost:8001/api/v1/namespaces/default/pods/$POD_NAME/proxy/\nRef: https://stackoverflow.com/a/55192825/3408577\nOption 3 - Minikube ssh ➜ ~ kubectl get endpoints NAME ENDPOINTS AGE kubernetes 192.168.49.2:8443 3h12m my-nginx 172.17.0.3:80,172.17.0.4:80 3h12m ➜ ~ minikube ssh Last login: Tue Apr 13 19:22:22 2021 from 192.168.49.1 docker@minikube:~$ curl 172.17.0.3:80 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; ... Option 4 - NodePort We will change our Service to use a NodePort\napiVersion: v1  kind: Service  metadata: name: my-nginx  labels: run: my-nginx  spec: ports: - port: 80 protocol: TCP  selector: run: my-nginx ➜ ~ kubectl get services NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE kubernetes ClusterIP 10.96.0.1 \u0026lt;none\u0026gt; 443/TCP 3h40m my-nginx NodePort 10.109.50.51 \u0026lt;none\u0026gt; 80:30305/TCP 3h40m ➜ ~ kubectl cluster-info Kubernetes control plane is running at https://192.168.49.2:8443 KubeDNS is running at https://192.168.49.2:8443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'. Use the Kubernetes node IP from the cluster info with the NodePort from the service:\ncurl 192.168.49.2:30305 Ref: https://kubernetes.io/docs/concepts/services-networking/service/#nodeport\nOther notes General info on accessing your cluster: https://kubernetes.io/docs/tasks/access-application-cluster/access-cluster/#accessing-services-running-on-the-cluster\n"
    }
,
    {
        "ref": "https://semeniuc.ml/blog/firefox-fix-checkbox-effect-on-youtube/",
        "title": "Fix Firefox Checkerbox Effect on Youtube",
        "section": "blog",
        "tags": null,
        "date" : "2021.02.27",
        "body": "In Firefox on Linux, in fast moving scenes, you can see a checkerbox effect.\nTo fix this,\n Open about:config Change layers.acceleration.force-enabled to true Restart Firefox  That\u0026rsquo;s it!\nTry this on a scene that has movement and high contrast, for example: https://youtu.be/0J6XKhn8LgY?t=27\n"
    }
,
    {
        "ref": "https://semeniuc.ml/blog/mac-os-x-disable-mouse-acceleration/",
        "title": "Mac OS X Disable Mouse Acceleration",
        "section": "blog",
        "tags": null,
        "date" : "2020.10.09",
        "body": "In your terminal, enter the following:\ndefaults write .GlobalPreferences com.apple.mouse.scaling -1 defaults write .GlobalPreferences com.apple.trackpad.scaling -1 defaults write .GlobalPreferences com.apple.scrollwheel.scaling -1 "
    }
,
    {
        "ref": "https://semeniuc.ml/blog/using-foreign-keys-with-sqlite-and-diesel-r2d2/",
        "title": "Using Foreign Keys With Sqlite and Diesel + R2D2",
        "section": "blog",
        "tags": null,
        "date" : "2020.05.06",
        "body": "Using Foreign Keys With Sqlite and Diesel + R2D2 SQLite requires each connection to enable foreign key support (due to backward compatiblity). We want to enable foreign key support in a single location only. We can do that using connection_customizer(). Let\u0026rsquo;s look at the code below.\nEnvironment  Rust 1.42 Linux  Cargo.toml [package] name = \u0026#34;demo\u0026#34; version = \u0026#34;1.0.0\u0026#34; authors = [\u0026#34;Eric Semeniuc \u0026lt;3838856+esemeniuc@users.noreply.github.com\u0026gt;\u0026#34;] edition = \u0026#34;2018\u0026#34; [dependencies] diesel = { version = \u0026#34;1.4.4\u0026#34;, features = [\u0026#34;sqlite\u0026#34;, \u0026#34;r2d2\u0026#34;, \u0026#34;chrono\u0026#34;] } Code use diesel::prelude::*; use diesel::r2d2::{Pool, ConnectionManager}; use diesel::connection::SimpleConnection; pub fn establish_connection_temp_db() -\u0026gt; Pool\u0026lt;ConnectionManager\u0026lt;SqliteConnection\u0026gt;\u0026gt; { let manager = ConnectionManager::\u0026lt;SqliteConnection\u0026gt;::new(\u0026#34;:memory:\u0026#34;); #[derive(Debug)] struct SqliteForeignKey {} impl diesel::r2d2::CustomizeConnection::\u0026lt;SqliteConnection, diesel::r2d2::Error\u0026gt; for SqliteForeignKey { fn on_acquire(\u0026amp;self, conn: \u0026amp;mut SqliteConnection) -\u0026gt; Result\u0026lt;(), diesel::r2d2::Error\u0026gt; { conn.batch_execute(\u0026#34;PRAGMA foreign_keys = ON\u0026#34;).map_err(diesel::r2d2::Error::QueryError) } } Pool::builder().connection_customizer(Box::new(SqliteForeignKey {})).build(manager).expect(\u0026#34;Failed to create pool.\u0026#34;) } Documentation https://docs.diesel.rs/diesel/r2d2/struct.Builder.html#method.connection_customizer\n"
    }
,
    {
        "ref": "https://semeniuc.ml/blog/using-render-props-to-pass-in-components-with-typescript-react/",
        "title": "Using Render Props to Pass in Components With Typescript \u0026 React",
        "section": "blog",
        "tags": null,
        "date" : "2020.03.27",
        "body": "In React and Typescript it\u0026rsquo;s sometimes tricky to pass in a component as a prop. We do that using React.FunctionComponent or React.FC as a shorthand.\nReact.FC React.FC uses a type parameter for props, eg. use React.FC or React.FC\u0026lt;\u0026gt; when no parameters are needed, and React.FC\u0026lt;{ paramName1: string, paramName2: int}\u0026gt; for a functional component which takes in 2 parameters of type string and int respectively.\nCodeSandbox Example  Sandbox link: https://codesandbox.io/s/strange-snowflake-7x93r\nOther notes Environment:\n Typescript 3.8.3 React 16.13.1 Create React App 3.4.1  "
    }
,
    {
        "ref": "https://semeniuc.ml/blog/how-to-use-go-1.14-modules-with-local-packages/",
        "title": "How To Use Go 1.14 Modules With Local Packages",
        "section": "blog",
        "tags": null,
        "date" : "2020.03.16",
        "body": "Let\u0026rsquo;s do a simple example: you want to create a package foo which has your business logic, and want to have a small main driver (ie. make it executable, and not a library only).\nStarting out Here\u0026rsquo;s our starting folder structure:\n. ├── README.md └── main.go Contents of main.go:\npackage main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;hi\u0026#34;) } Adding a package We want to make a package foo that has logic, so we make a directory for foo, and foo/foo.go file with a doWork() function.\nNew folder structure:\n. ├── README.md ├── foo │ └── foo.go └── main.go Here\u0026rsquo;s the contents of foo/foo.go\npackage foo func DoWork() int { return 42 } Lets initialize the module:\n➜ cd foo \u0026amp;\u0026amp; go mod init foo go: creating new go.mod: module foo Here\u0026rsquo;s the layout now:\n. ├── README.md ├── foo │ ├── foo.go │ └── go.mod └── main.go Notice that foo/go.mod has been created with the contents:\nmodule foo go 1.14 We can run go mod tidy from the foo directory to automatically find all dependencies used in foo and download them.\nUsing our new package Now lets make use of foo in our main.go file.\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;foo\u0026#34; ) func main() { fmt.Println(foo.DoWork()) } We also need to tell Go that we want to use a local package, so we need to make a new mod.go file from the project root.\n➜ cd .. \u0026amp;\u0026amp; go mod init main go: creating new go.mod: module main Here\u0026rsquo;s our folder structure now:\n. ├── README.md ├── foo │ ├── foo.go │ └── go.mod ├── go.mod └── main.go We need to tell the compiler that we want to use our local library, so we append replace foo =\u0026gt; ./foo to go.mod. Check the Go Wiki for more info about modules.\nThis is go.mod after the modification:\nmodule main go 1.14 replace foo =\u0026gt; ./foo Let\u0026rsquo;s run it\n➜ go run main go: found foo in foo v0.0.0-00010101000000-000000000000 42 It works! Also notice that our main go.mod file was automatically updated to add foo to the list of modules:\nmodule main go 1.14 replace foo =\u0026gt; ./foo require foo v0.0.0-00010101000000-000000000000 The require foo v0.0.0-00010101000000-000000000000 line tells the Go compiler which version of a dependency we are using. In this case, it\u0026rsquo;s unversioned since it\u0026rsquo;s local. If we used a library from GitHub, eg. graphql-go, we would have a line like github.com/graph-gophers/graphql-go v0.0.0-20200309224638-dae41bde9ef9.\nFinished Project See https://github.com/esemeniuc/goModuleDemo for the complete project\n"
    }
,
    {
        "ref": "https://semeniuc.ml/blog/add-keyboard-shortcuts-to-jupyter-lab/",
        "title": "Add Keyboard Shortcuts to Jupyter Lab",
        "section": "blog",
        "tags": null,
        "date" : "2019.11.09",
        "body": "Via config file Edit with your favourite editor:\n~/.jupyter/lab/user-settings/@jupyterlab/shortcuts-extension/shortcuts.jupyterlab-settings Via web interface Settings -\u0026gt; Advanced Settings Editor -\u0026gt; Keyboard Shortcuts\nExample to use Shift+D to restart and run all cells { \u0026#34;shortcuts\u0026#34;:[ { \u0026#34;command\u0026#34;:\u0026#34;runmenu:restart-and-run-all\u0026#34;, \u0026#34;keys\u0026#34;:[ \u0026#34;Shift D\u0026#34; ], \u0026#34;selector\u0026#34;:\u0026#34;[data-jp-code-runner]\u0026#34; } ] } "
    }
,
    {
        "ref": "https://semeniuc.ml/blog/enable-headphone-jack-on-swift3-linux/",
        "title": "Enable 3.5mm Headset Microphone on Acer Swift 3 with Arch Linux",
        "section": "blog",
        "tags": null,
        "date" : "2019.10.29",
        "body": "Final solution cat \u0026#34;options snd-hda-intel model=alc256-asus-mic\u0026#34; \u0026gt;\u0026gt; /etc/modprobe.d/sound.conf Then restart\nFor Testing Stop pulseaudio systemctl --user stop pulseaudio.socket systemctl --user stop pulseaudio.service Remove sound driver sudo modprobe -r snd_hda_intel Switch driver modes sudo modprobe snd_hda_intel model=alc256-asus-mic Re-enable pulseaudio systemctl --user start pulseaudio.socket systemctl --user start pulseaudio.service "
    }
,
    {
        "ref": "https://semeniuc.ml/blog/move-all-i3-workspaces-to-monitor/",
        "title": "Move All i3 Workspaces to Monitor",
        "section": "blog",
        "tags": null,
        "date" : "2019.10.29",
        "body": "This moves everything to HDMI1\nfor i in {9..1}; do i3-msg \u0026#34;workspace ${i}, move workspace to output HDMI1\u0026#34;; done "
    }
,
    {
        "ref": "https://semeniuc.ml/blog/using-alpine-linux-on-qemu/",
        "title": "Using Alpine Linux on QEMU",
        "section": "blog",
        "tags": null,
        "date" : "2019.09.13",
        "body": " Get QEMU  sudo pacman -S qemu Get Alpine Linux  wget http://dl-cdn.alpinelinux.org/alpine/v3.10/releases/x86_64/alpine-standard-3.10.2-x86_64.iso Run QEMU  qemu-system-x86_64 -boot d -cdrom alpine-standard-3.10.2-x86_64.iso -m 512 -enable-kvm -nic user,ipv6=off Flags: -boot d: boot from CDROM -cdrom: load iso image -m 512: allocate 512MB RAM -enable-kvm: speeds up emulation on Linux hosts -nic user,ipv6=off: uses the \u0026ldquo;user\u0026rdquo; network interface, disables ipv6\nEnable the network adapter  ifconfig eth0 up udhcpc Test network connection  nslookup google.com Note: ICMP ping doesn\u0026rsquo;t work in QEMU\n"
    }
,
    {
        "ref": "https://semeniuc.ml/blog/canon-printer-arch/",
        "title": "Canon MF4770n Network Printer Setup on Arch Linux",
        "section": "blog",
        "tags": null,
        "date" : "2019.09.08",
        "body": "Install pacaur or substitute for your favourite AUR helper\npacaur -S cndrvcups-lb-bin sudo system-config-printer  Click \u0026ldquo;Add\u0026rdquo; button Under the \u0026ldquo;Devices\u0026rdquo; sidebar, expand the \u0026ldquo;Network Printer\u0026rdquo; item Wait several seconds and \u0026ldquo;Canon MF4700 (192.168.XXX.XXX)\u0026rdquo; will appear. Click it Keep the default host, port number, and conection Kee the default printer name and location Print a test page :)  "
    }
,
    {
        "ref": "https://semeniuc.ml/blog/my-first-post/",
        "title": "New static site with hugo :)",
        "section": "blog",
        "tags": null,
        "date" : "2019.09.05",
        "body": "Switched from wordpress, making waves here!\n"
    }
]
